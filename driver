/*
Prolog
a.	Program Description - This program will control a car remotely via Bluetooth. The user will have the option to manually control the car or enable autonomous mode. Autonomous mode will follow a line on the floor while avoiding obstructions. The car will also record acceleration values of the car and store the maximum values via the on-board EEPROM. This data will also be able to be printed to the serial monitor when connected.
b.	Author - Nick Jasso
c.	Input/Output Description - All inputs are read through the app ArduinoBlue. Manual mode is controlled by inputs from the joystick while the inputs for the autonomous mode are input by line readers and an ultrasonic sensor mounted on the front of the car. Additional buttons are used to store and print the maximum accelerations. All outputs are dependent of inputs; the motors will respond accordingly to the line reader values, the led will change depending on the mode and blink to notify if data was written to the EEPROM, and the messages sent to the phone/serial monitor will confirm a choice made by the user.
d.	Process Flow - All libraries, variables, and prototypes are included and/or declared. The user will start in manual drive mode and the phone will prompt the user when the setup is complete. The user can drive using the joystick which utilizes the ArduinoBlue library reading inputs for throttle and steering. The MPU is polling and reading values every 100 ms if the user wants to store the data. Values of acceleration are converted to g's and does not include negative values. The LED will blink to notify users their data was saved. If the user presses the "MODE" button at any time, the car will change to autonomous mode and the LED will change from red to green. The car, in autonomous mode, reads the values of the line readers and polls the ultrasonic sensor for distance. The values of acceleration are still being recorded and may be stored during this mode (the LED will blink accordingly regardless of the mode). If both line sensors return 0, the car will go forward and slow down if the values of the line readers do not change. If one of the line sensors returns 1, the respective motor will slow down and turn the car back on track. If both line sensors return 1, the car is assumed to be off the track and will attempt to turn until a line sensor reads a 0. If the ultrasonic sensor reads a value lower than 10, the car will stop and turn to the right, sweep left and store values into an array, avg the first half and second half of the array, and based on which average distance is higher, the car will go either left or right to go around the obstruction. The car is assumed to be past the obstruction and going in the proper direction; the motors will remain on and continue on its path until a line is read again. If a line is read, the car will realign itself and continue; otherwise, the car may be off path and the kill-switch may be activated by pressing "MODE" during its re-pathing. Kill-switch will automatically be activated if the car consecutively runs through the re-pathing function too many times. The user will be prompted on their phone when the car's kill-switch is activated and may restart the program by pressing the red button on the physical car.
*/


#include <SoftwareSerial.h>
#include <ArduinoBlue.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
#include <Wire.h>
#include <EEPROM.h>

/*Setting up Bluetooth*/
#define RX 3
#define TX 4
SoftwareSerial bt(RX, TX);
ArduinoBlue phone(bt);

/*Motor Variables*/
#define enA 11    //motor A pin
#define enB 10    //motor B pin
#define in1 13    //gate 1
#define in2 12    //gate 2
#define in3 8     //gate 3
#define in4 7     //gate 4
int Xjoy, Yjoy, Rreduction, Lreduction;
const int FAST = 100;

/*Line Sensor Variables*/
#define LR1 A0
#define LR2 A1
int LR1val, LR2val, slow = 0, lineMode = -1;

/*Mode Switch Variables*/
#define LED 5
int current = -1, prev = current;
bool automated = false;
int mode;

/*UltraSonic Sensor & Polling Variables*/
#define echo 6
#define trig 9
float distance, ping, SOS = 776.5;
unsigned long currentTime, prevTime = 0;
const unsigned long INTERVAL = 100;

/*MPU 6050 & EEPROM Variables*/
long accelX, accelY, accelZ;
float gForceX, gForceY, gForceZ;
float xMax = 0, yMax = 0, zMax = 0;
int address = 230, EEstart = address; //starting at mem address 230
int EEcount = 0;
float EEval;
//2nd polling
unsigned long MPU_time, MPU_prev_time = 0;
const unsigned long MPU_INTERVAL = 500;

/*Function Prototypes*/
void setPins();
void manualDrive();
void Rforward(int spd);
void Lforward(int spd);
void Rreverse(int spd);
void Lreverse(int spd);
void stopMotors();
void Lstop();
void Rstop();
int modeSet();
void setupMPU();
void recordAccel();
void processData();
void storeData();
void EEsend();
void automaticDrive();
float avoidance();
void avoid();
void readLine();
void killSwitch();

void setup()
{
  setPins();
  stopMotors();   //not shorting anything today
  
  /*Begin Communicating with Devices*/
  Serial.begin(9600);
  Wire.begin();
  setupMPU();     //Start comms with MPU
  bt.begin(9600);
  delay(100);     //gives bluetooth enough time to connect

  phone.sendMessage("Setup Complete!\n--Manual Mode--");
  digitalWrite(LED, LOW); //red
}

void loop()
{
  /*Switching Mode*/
  mode = modeSet();
  
  /*H-Bridge Section*/
  if(mode == 2)
  {  
    automaticDrive();
  }
  else    //mode == 1
  {
    manualDrive();
  }
  
  /*MPU*/
  recordAccel();
  EEsend();
}

/*****************************************************************/
/****************************FUNCTIONS****************************/
/*****************************************************************/
void setPins()
{
  pinMode(LED, OUTPUT);
  pinMode(enA, OUTPUT);
  pinMode(enB, OUTPUT);
  pinMode(in1, OUTPUT);
  pinMode(in2, OUTPUT);
  pinMode(in3, OUTPUT);
  pinMode(in4, OUTPUT);
  pinMode(LR1, INPUT);
  pinMode(LR2, INPUT);
  pinMode(echo, INPUT);
  pinMode(trig, OUTPUT);
}

void automaticDrive()
{
  distance = avoidance();
  
  if(distance < 10.00)
  {
    avoid();  //program used to go around a roadblock
  }
  else
  {
    readLine(); //function for reading line and driving on line
  }
}

float avoidance()
{
  currentTime = millis();
  if(currentTime - prevTime > INTERVAL)
  {
    /*Ultrasonic Crash Avoidance*/
    digitalWrite(trig, LOW); //Set trigger pin low
    delayMicroseconds(2000); //Let signal settle
    digitalWrite(trig, HIGH); //Set trigPin high
    delayMicroseconds(15); //Delay in high state
    digitalWrite(trig, LOW); //ping has now been sent
    delayMicroseconds(10); //Delay in low state
  
    ping = pulseIn(echo, HIGH);
    ping = ping / 1000000;
    ping = ping / 3600;
    distance = SOS * ping;
    distance = distance / 2;
    distance = distance * 63360;
   
    prevTime = currentTime;
    return distance;
  }
  return 10;
}

void avoid()
{
  LR1val = digitalRead(LR1);
  LR2val = digitalRead(LR2);
  if(LR1val == 0 || LR2val == 0) //not off track
  {
    /*Stop and Prep*/
    stopMotors();
    delay(500);
    killSwitch();
    /*Turn Car */
    Lforward(FAST);
    Rreverse(FAST);
    delay(250);
    killSwitch();
    stopMotors();
    delay(500);
    killSwitch();
    /*Scan*/
    Rforward(FAST);
    Lreverse(FAST);
    float d[6];
    float avgL = 0, avgR = 0;
    for(int i = 5; i >= 0; i--)
    {
      d[i] = avoidance();   //store array of distances
      delay(120);
      if(i == 3)
      {
        delay(65); 
        stopMotors();    
      }
    }
  
    avgL = (d[0] + d[1] + d[2]) / 3;
    avgR = (d[3] + d[4] + d[5]) / 3;

    //Printing results for debugging
//    for(int i = 0; i < 6; i++)
//      Serial.println(d[i]);
//    Serial.print(avgL); Serial.print(" ");
//    Serial.println(avgR);
    
    //Pause
    delay(1000);
    killSwitch();
      
    //Going around to the Left
    if(avgL > avgR)
    {
      //forward
      Lforward(100);
      Rforward(100);
      delay(550);
      
      killSwitch();
      
      //turn right parallel to line
      Rstop();
      delay(450);
      //drive parallel to line
      Lforward(80);
      Rforward(80);
      delay(900);
      //turn back toward line
      Lforward(60);
      Rforward(40);
      delay(700);
      //forward until line is hit
      Lforward(40);
      Rforward(40);
      
      killSwitch();
     
      do
      {
        LR1val = digitalRead(LR1);
        LR2val = digitalRead(LR2);
        if(LR1val != 0 && LR2val == 0)
        {
          Rforward(FAST);
          Lreverse(FAST);
          delay(200);
          break;  
        }
        current = phone.getButton();  //press "mode" to exit loop
        if(current == 0)
          break;
      }while(LR1val == 0);
  
    }
    else
    {
      //going around to the right
      Lforward(FAST);
      Rreverse(FAST);
      delay(430);
      stopMotors();
      delay(250);
      
      killSwitch();
      
      //forward
      Lforward(100);
      Rforward(100);
      delay(550);      
      //turn left parallel to line
      Lstop();
      delay(500);       
      //drive parallel to line
      Lforward(80);
      Rforward(65);
      delay(800);       
      //turn back toward line
      Rforward(80);
      Lforward(40);
      delay(700);
      //forward until line is hit
      Rforward(50);
      Lforward(45);
      delay(450);

      killSwitch(); 

      do
      {
        LR1val = digitalRead(LR1);
        LR2val = digitalRead(LR2);
        if(LR2val != 0 && LR1val == 0)
        {
          Lforward(FAST);
          Rreverse(FAST);
          delay(200);
          break;  
        }
        current = phone.getButton();  //press "mode" to exit loop
        if(current == 0)
          break;
      }while(LR2val == 0);
    }
  }
//  else  //reading a roadblock while off the track
//    while(1)
//    {
//      stopMotors();
//      current = phone.getButton();  //press "mode" to exit loop
//      if(current == 0)
//        break;
//    }
}

void readLine()
{
  LR1val = digitalRead(LR1);
  LR2val = digitalRead(LR2);
  
  if(LR1val == 0 && LR2val == 0)  //forward
  {
    if(lineMode != 0)
      slow = 0;
    Lforward(FAST - slow);
    Rforward(FAST - slow);
    if(slow < 60)
    {
      slow++;
      delay(10);
    }
    lineMode = 0;
  }
  else if(LR1val != 0 && LR2val == 0)  //turn left
  {
    if(lineMode != 1)
      slow = 0;
    Rforward(FAST - slow);
    Lreverse(80 - slow);
    if(slow < 60)
    {
      slow++;
      delay(10);
    }
    lineMode = 1;
  }
  else if(LR1val == 0 && LR2val != 0)  //turn right
  {
    if(lineMode != 2)
      slow = 0;
    Lforward(FAST - slow);
    Rreverse(80 - slow);
    if(slow < 60)
    {
      slow++;
      delay(10);
    }
    lineMode = 2;
  }
  else if(LR1val != 0 && LR2val != 0)
  {
    if(lineMode != 3)
      slow = 0;
    Rforward(FAST - slow);
    Lreverse(FAST - slow);
    if(slow < 30)
    {
      slow++;
      delay(10);
    }
    lineMode = 3;
  }
}

/*Sets mode of the car*/
int modeSet()
{
  current = phone.getButton();  
  if(current != 0 && prev == 0) //???? How did this happen?????
  {                             //Current and Prev are inversed??
    automated = !automated;     //might have something to do with EEsend()
    if(automated)               //compiles and works = im happy
    {
      stopMotors();
      digitalWrite(LED, HIGH);  
      //phone.sendMessage("--Automatic Mode--");
      return 2;
    }
    else
    {
      stopMotors();
      digitalWrite(LED, LOW);
      //phone.sendMessage("--Manual Mode--");
      return 1;
    }
  }
  prev = current;
}

/*Car Functions*/
void manualDrive()  //main funcion of car motors
{
  slow = 0;   //resetting a value for automatic drive
  //reading values from phone
  Xjoy = phone.getSteering() - 49;
  Yjoy = phone.getThrottle() - 49;
  if (Yjoy > -10)  //car is going forward 
  {
    if (Xjoy > 0)  //checking right motor speed reduction
    {
        Lreduction = 0;
        Rreduction = map(Xjoy, 0, 49, 0, 255);
        Rreduction = constrain(Rreduction, 0, 255);
    }
    else if (Xjoy < 0)  //checking left motor
    {
        Rreduction = 0;
        Lreduction = map(Xjoy, 0, -49, 0, 255);
        Lreduction = constrain(Lreduction, 0, 255);
    }
    else //no reduction in either wheel
    {
        Rreduction = 0;
        Lreduction = 0;
    }
    
    Yjoy = map(Yjoy, 0, 49, 0, 255);
    Yjoy = constrain(Yjoy, 0, 255);
    Lforward(constrain(Yjoy - Lreduction, 0, 255));
    Rforward(constrain(Yjoy - Rreduction, 0, 255));
  }
  else if (Yjoy < -12) //car is going in reverse
  {
    if (Xjoy > 0)  //checking right motor speed reduction
    {
        Lreduction = 0;
        Rreduction = map(Xjoy, 0, 49, 0, 255);
        Rreduction = constrain(Rreduction, 0, 255);
    }
    else if (Xjoy < 0)  //checking left motor
    {
        Rreduction = 0;
        Lreduction = map(Xjoy, 0, -49, 0, 255);
        Lreduction = constrain(Lreduction, 0, 255);
    }
    else  //no reduction in either wheel
    {
        Rreduction = 0;
        Lreduction = 0;
    }

    Yjoy = map(Yjoy, 0, -49, 0, 255);
    Yjoy = constrain(Yjoy, 0, 255);
    Lreverse(constrain(Yjoy - Lreduction, 0, 255));
    Rreverse(constrain(Yjoy - Rreduction, 0, 255));
  }
  else //The Y direction is neither forward or backward
  {
    if (Xjoy > 0)//perfect right
    {
        Rstop();
        Xjoy = map(Xjoy, 0, 49, 0, 255);
        Xjoy = constrain(Xjoy, 0, 255);
        Lforward(Xjoy);
    }
    else if (Xjoy < 0)//perfect left
    {
        Lstop();
        Xjoy = map(Xjoy, 0, -49, 0, 255);
        Xjoy = constrain(Xjoy, 0, 255);
        Rforward(Xjoy);
    }
    else  //perfect neutral
    {
        stopMotors();
        Lreduction = 0;
        Rreduction = 0;      
    }
  }
}

void Rforward(int spd)
{
    digitalWrite(in2, HIGH);  //spinning right wheel
    digitalWrite(in1, LOW);   
    analogWrite(enA, spd);    //mapped value from phone input
}
void Lforward(int spd)
{
    digitalWrite(in3, HIGH);  //spinning left wheel
    digitalWrite(in4, LOW);   
    analogWrite(enB, spd);    //mapped value from phone input
}
void Rreverse(int spd)
{
    digitalWrite(in1, HIGH);  //spinning right wheel
    digitalWrite(in2, LOW); 
    analogWrite(enA, spd);    //mapped value from phone input
}
void Lreverse(int spd)
{
    digitalWrite(in4, HIGH);  //spinning left wheel
    digitalWrite(in3, LOW); 
    analogWrite(enB, spd);    //mapped value from phone input
}
void stopMotors() //does what it says to be honest, stops all motors
{
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
}
void Rstop()  //I wonder what this does? stops right motor
{
    digitalWrite(in1, LOW);
    digitalWrite(in2, LOW);
}
void Lstop()  //I wonder what THIS does? stops left motor
{
    digitalWrite(in3, LOW);
    digitalWrite(in4, LOW);
}

/*MPU Functions*/
void setupMPU()
{
  Wire.beginTransmission(0b1101000); //This is the I2C address of the MPU
  Wire.write(0x6B); //Accessing the register 6B - Power Management
  Wire.write(0b00000000); //Setting SLEEP register to 0
  Wire.endTransmission();
  Wire.beginTransmission(0b1101000); //I2C address of the MPU
  Wire.write(0x1C); //Accessing the register 1C - Acccelerometer Configuration (Sec. 4.5)
  Wire.write(0b00000000); //Setting the accel to +/- 2g
  Wire.endTransmission();
}
void recordAccel() 
{
  MPU_time = millis();
  if(MPU_time - MPU_prev_time > MPU_INTERVAL)
  {
    Wire.beginTransmission(0b1101000); //I2C address of the MPU
    Wire.write(0x3B); //Starting register for Accel Readings
    Wire.endTransmission();
    Wire.requestFrom(0b1101000,6); //Request Accel Registers (3B - 40)
    while(Wire.available() < 6); 
    accelX = Wire.read()<<8|Wire.read(); //Store first two bytes into accelX 
    accelY = Wire.read()<<8|Wire.read(); //Store middle two bytes into accelY
    accelZ = Wire.read()<<8|Wire.read();
    processData();    
  }
}
void processData()
{ 
  gForceX = abs(accelX / 16384.0); 
  gForceY = abs(accelY / 16384.0);
  gForceZ = abs(accelZ / 16384.0);
  storeData();
}
void storeData()
{
  /*Storing Max Values*/
  if(gForceX > xMax)
    xMax = gForceX;
  if(gForceY > yMax)
    yMax = gForceY;
  if(gForceZ > zMax)
    zMax = gForceZ;

  //Printing Values for debugging
//  Serial.print(" Accel (g)");
//  Serial.print(" X=");
//  Serial.print(xMax);
//  Serial.print(" Y=");
//  Serial.print(yMax);
//  Serial.print(" Z=");
//  Serial.println(zMax);
} 
void EEsend()
{
  /*Saves Maximum Values to Memory Locations*/
  current = phone.getButton();  //check if button was pressed
  //10 entries max
  if(current == 3 && address < 0)
  {
    Serial.println("Max amount of data saved!");
    phone.sendMessage("Max amount of data saved!");
  }
  //Writing value to EEPROM
  if(current == 3 && prev != 3 && address > 0) 
  {
  //Printing Values for Debugging
//    Serial.print("y = "); Serial.print(xMax);
//    Serial.print(" | x = "); Serial.print(yMax);
//    Serial.print(" | z = "); Serial.println(zMax);
//    Serial.println(address);

    /*Storing Values to respective addresses*/
    EEPROM.put(address, xMax);  //floats 8 bytes each
    EEPROM.put(address + 8, yMax);
    EEPROM.put(address + 16, zMax);
    address -= 24;
    EEcount++;      //counting num of saves
    xMax = yMax = zMax = 0;   //reset values for next entry
    
    //letting user know when something is saved
    if(automated)
    {
      digitalWrite(LED, LOW);
      delay(50);
      digitalWrite(LED, HIGH);
    }
    else
    {
      digitalWrite(LED, HIGH);
      delay(50);
      digitalWrite(LED, LOW);
    }

  }
  //Read Stored Data
  else if(current == 4 && prev != 4)
  {
    //Error Message for No Entries yet
    if(EEcount == 0 && EEPROM.get(EEstart, EEval) == 0)
      Serial.println("No memory saved yet!");
    //Reading Max Value on Startup
    else if(EEcount == 0)
    {
      /*Printing Max Values*/
      Serial.println("Max Acceleration:");
      EEPROM.get(address, EEval);
      Serial.print("y = "); Serial.print(EEval);
      EEPROM.get(address + 8, EEval);
      Serial.print(" | x = "); Serial.print(EEval);
      EEPROM.get(address + 16, EEval);
      Serial.print(" | z = "); Serial.println(EEval);
      Serial.println();
    }
    //Read All Values if Connected to Serial Monitor
    else
    {
      Serial.println("\nCurrently Saved Accelerations:");
      for(int i = EEstart; i > EEstart - EEcount * 24; i -= 24)
      {
        EEPROM.get(i, EEval);
        Serial.print("y = "); Serial.print(EEval);
        EEPROM.get(i + 8, EEval);
        Serial.print(" | x = "); Serial.print(EEval);
        EEPROM.get(i + 16, EEval);
        Serial.print(" | z = "); Serial.println(EEval);
      }
      Serial.println();
    }
  }
  prev = current;
}

/*Stops Program when in AVOIDANCE mode*/
void killSwitch()
{
  current = phone.getButton();  //stop program by pressing "mode"
  if(current == 0)
  {
    phone.sendMessage("Kill-Switch Activated: Restart Car");
    while(1)
      stopMotors();      
  }
}
